diff --git a/projects/uniswap-v2/src/UniswapV2Pair.sol b/projects/uniswap-v2/src/UniswapV2Pair.sol
index 83cfddc..3a4bdfa 100644
--- a/projects/uniswap-v2/src/UniswapV2Pair.sol
+++ b/projects/uniswap-v2/src/UniswapV2Pair.sol
@@ -1,14 +1,14 @@
 pragma solidity ^0.8.0;
 
+import "./HalmosMath.sol";
 import "./interfaces/IUniswapV2Pair.sol";
 import "./UniswapV2ERC20.sol";
-import "./libraries/Math.sol";
 import "./libraries/UQ112x112.sol";
 import "./interfaces/IERC20.sol";
 import "./interfaces/IUniswapV2Factory.sol";
 import "./interfaces/IUniswapV2Callee.sol";
 
-/*IUniswapV2Pair*/ contract UniswapV2Pair is UniswapV2ERC20 {
+/*IUniswapV2Pair*/ contract UniswapV2Pair is UniswapV2ERC20, HalmosMath {
     using SafeMath for uint;
     using UQ112x112 for uint224;
 
@@ -127,8 +127,8 @@ import "./interfaces/IUniswapV2Callee.sol";
         uint _kLast = kLast; // gas savings
         if (feeOn) {
             if (_kLast != 0) {
-                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));
-                uint rootKLast = Math.sqrt(_kLast);
+                uint rootK = sqrt(uint(_reserve0).mul(_reserve1));
+                uint rootKLast = sqrt(_kLast);
                 if (rootK > rootKLast) {
                     uint numerator = totalSupply.mul(rootK.sub(rootKLast));
                     uint denominator = rootK.mul(5).add(rootKLast);
@@ -152,10 +152,10 @@ import "./interfaces/IUniswapV2Callee.sol";
         bool feeOn = _mintFee(_reserve0, _reserve1);
         uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
         if (_totalSupply == 0) {
-            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
+            liquidity = sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
             _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens
         } else {
-            liquidity = Math.min(
+            liquidity = min(
                 amount0.mul(_totalSupply) / _reserve0,
                 amount1.mul(_totalSupply) / _reserve1
             );
